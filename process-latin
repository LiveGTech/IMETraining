#!/usr/bin/env node

/*
    IME Training

    Copyright (C) LiveG. All Rights Reserved.

    https://liveg.tech
    Licensed by the LiveG Open-Source Licence, which can be found at LICENCE.md.
*/

const fs = require("fs");

const N_GRAM_DICTIONARY_SEPARATOR = "\u241E";

console.log(`Reading base data for \`${process.argv[2]}\`...`);

var info = JSON.parse(fs.readFileSync(process.argv[2], "utf-8"));
var nGrams = info.baseNGrams || {};
var allWords = {};
var finalData = {};
var maximumNGramCount = 0;
var maximumWordCount = 0;

finalData.localeCode = info.localeCode;
finalData.type = info.type;
finalData.metadata = info.metadata;

var spellingMap = info.spellingMap ? JSON.parse(fs.readFileSync(info.spellingMap, "utf-8")) : {};

info.corpusPaths.forEach(function(path) {
    console.log(`Finding n-grams for path \`${path}\`...`);

    var corpusData = fs.readFileSync(path, "utf-8");
    var corpusSentences = corpusData.split(/[.,?!-]/);

    corpusSentences.forEach(function(sentence) {
        sentence = sentence.trim();
        
        var words = sentence.split(" ");

        for (var i = 0; i < words.length; i++) {
            words[i] = words[i].trim();
            words[i] = spellingMap[words[i]] || words[i];

            if (words[i] == "") {
                return;
            }

            words[i] = words[i].replace(/[^\w\s'-]|\n|\t/g, "");

            if (words[i].match(/^[\d.,+\-Â±]+$/)) {
                return;
            }

            allWords[words[i]] ||= 0;
            allWords[words[i]]++;

            if (allWords[words[i]] > maximumWordCount) {
                maximumWordCount = allWords[words[i]];
            }
        }

        // TODO: Iterate to add variable-length n-grams

        for (var i = 0; i < words.length; i++) {
            var nGram = words.slice(Math.max(i - info.metadata.nGramLength, 0), i);
            var result = nGram.pop();
            var key = nGram.map((word) => word.toLocaleLowerCase()).join(N_GRAM_DICTIONARY_SEPARATOR) + N_GRAM_DICTIONARY_SEPARATOR;

            if (!result || nGram.length == 0) {
                continue;
            }

            nGrams[key] ||= [];

            var existingResult = nGrams[key].find((candidate) => candidate.result == result);

            if (existingResult) {
                existingResult.count++;

                if (!existingResult.paths.includes(path)) {
                    existingResult.paths.push(path);
                }

                if (existingResult.count > maximumNGramCount) {
                    maximumNGramCount = existingResult.count;
                }
            } else {
                nGrams[key].push({
                    result: result,
                    count: 1,
                    paths: [path]
                });

                if (maximumNGramCount == 0) {
                    maximumNGramCount = 1;
                }
            }
        }
    });
});

console.log(`Highest n-gram candidate occurence count: ${maximumNGramCount}`);
console.log(`Highest word occurence count: ${maximumWordCount}`);

console.log("Processing n-grams...");

delete nGrams[N_GRAM_DICTIONARY_SEPARATOR];

var candidatesDeleted = 0;
var nGramsDeleted = 0;

Object.keys(nGrams).forEach(function(key) {
    nGrams[key].forEach(function(candidate, i) {
        if ((candidate.hasOwnProperty("count") && candidate.count < 2) || (candidate.hasOwnProperty("paths") && candidate.paths.length < 3)) {
            nGrams[key][i] = null;
    
            candidatesDeleted++;

            return;
        }

        candidate.weighting = 0.5 + (0.25 * (candidate.count / maximumNGramCount));

        delete candidate.count;
        delete candidate.paths;
    });

    nGrams[key] = nGrams[key].filter((candidate) => candidate != null);

    if (nGrams[key].length == 0) {
        delete nGrams[key];

        nGramsDeleted++;
    }
});

console.log(`Deleted candidates: ${candidatesDeleted}`);
console.log(`Deleted n-grams: ${nGramsDeleted}`);

finalData.nGramDictionary = nGrams;
finalData.wordDictionary = [];

Object.keys(allWords).forEach(function(word) {
    if (allWords[word] < 2) {
        return;
    }

    finalData.wordDictionary.push({
        input: word.toLocaleLowerCase().replace(/['\-]/g, ""),
        result: word,
        weighting: 0.5 + (0.25 * (allWords[word] / maximumWordCount))
    });
});

console.log(`Total n-grams: ${Object.keys(nGrams).length}`);
console.log(`Total words: ${Object.keys(allWords).length}`);

console.log(`Saving final data to \`${process.argv[3]}\`...`);

fs.writeFileSync(process.argv[3], JSON.stringify(finalData));

console.log("Complete!");